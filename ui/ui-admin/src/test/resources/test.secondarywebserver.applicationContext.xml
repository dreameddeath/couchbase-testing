<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ 	Copyright Christophe Jeunesse
  ~
  ~ 	Licensed under the Apache License, Version 2.0 (the "License");
  ~ 	you may not use this file except in compliance with the License.
  ~ 	You may obtain a copy of the License at
  ~
  ~ 	http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ 	Unless required by applicable law or agreed to in writing, software
  ~ 	distributed under the License is distributed on an "AS IS" BASIS,
  ~ 	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ 	See the License for the specific language governing permissions and
  ~ 	limitations under the License.
  ~
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
            http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
            http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
    ">

    <context:annotation-config />

    <import resource="classpath:META-INF/spring/webserver.couchbase.applicationContext.xml" />
    <import resource="classpath:META-INF/spring/webserver.rest.applicationContext.xml" />
    <import resource="classpath:META-INF/spring/webserver.soap.applicationContext.xml" />
    <import resource="classpath:META-INF/spring/webserver.processes.applicationContext.xml" />
    <import resource="classpath:META-INF/spring/webserver.queries.applicationContext.xml" />

    <bean id="serviceRegistrar"
          class="com.dreameddeath.core.service.registrar.RestServiceRegistrar"
          factory-bean="serviceDiscovererManager"
          factory-method="getServiceRegistrar">
        <constructor-arg type="java.lang.String" value="test" />
    </bean>

    <bean id="soapServiceRegistrar"
          class="com.dreameddeath.core.service.soap.SoapServiceRegistrar"
          factory-bean="serviceDiscovererManager"
          factory-method="getServiceRegistrar">
        <constructor-arg type="java.lang.String" value="test" />
        <constructor-arg type="java.lang.String" value="SOAP" />
    </bean>


    <bean id="jobCreateProcess" class="com.dreameddeath.core.process.service.IJobProcessingService"
          factory-bean="processingServiceFactory" factory-method="addJobProcessingService">
        <constructor-arg value="com.dreameddeath.ui.admin.process.TestDocCreateJobProcess" />
    </bean>


    <bean id="remoteJobCreateProcess" class="com.dreameddeath.core.process.service.IJobProcessingService"
          factory-bean="processingServiceFactory" factory-method="addJobProcessingService">
        <constructor-arg value="com.dreameddeath.ui.admin.process.RemoteTestDocCreateJobProcess" />
    </bean>

    <bean id="processMapPreInit" factory-bean="executorClientsPreInit" factory-method="precreateJobAndTasksClients">
        <constructor-arg>
            <util:map key-type="java.lang.Class">
                <entry key="com.dreameddeath.ui.admin.process.TestDocCreateJob">
                    <list value-type="java.lang.Class">
                        <value>com.dreameddeath.ui.admin.process.TestDocCreateJob$TestDocCreateTask</value>
                    </list>
                </entry>
                <entry key="com.dreameddeath.ui.admin.process.RemoteTestDocCreateJob">
                    <list value-type="java.lang.Class">
                        <!--<value>com.dreameddeath.ui.admin.process.RemoteTestDocCreateJob$RemoteTestDocCreateTask</value>-->
                    </list>
                </entry>
            </util:map>
        </constructor-arg>
    </bean>


    <bean id="daos"
          factory-bean="couchbaseDaoFactory" factory-method="addDaoForEntities">
        <constructor-arg>
            <list>
                <value>test/root</value>
                <value>test/other</value>
                <value>test/testdocprocess</value>
            </list>
        </constructor-arg>
    </bean>

    <bean id="serviceRegistrarTests"
          class="com.dreameddeath.core.service.registrar.RestServiceRegistrar"
          factory-bean="serviceDiscovererManager"
          factory-method="getServiceRegistrar">
        <constructor-arg type="java.lang.String" value="tests" />
    </bean>

    <bean id="queryTestDoc"
          class="com.dreameddeath.ui.admin.QueryTestDocService"
          factory-bean="queryServiceFactory"
          factory-method="addQueryService">
        <constructor-arg value="com.dreameddeath.ui.admin.QueryTestDocService" />
    </bean>


    <bean id="queryTestOther"
          class="com.dreameddeath.ui.admin.QueryTestOtherService"
          factory-bean="queryServiceFactory"
          factory-method="addQueryService">
        <constructor-arg value="com.dreameddeath.ui.admin.QueryTestOtherService" />
    </bean>

    <bean id="queryTestProcess"
          class="com.dreameddeath.ui.admin.process.QueryTestDocProcessService"
          factory-bean="queryServiceFactory"
          factory-method="addQueryService">
        <constructor-arg value="com.dreameddeath.ui.admin.process.QueryTestDocProcessService" />
    </bean>



    <jaxrs:server id="testing" transportId="http://cxf.apache.org/transports/http" address="/" >
        <jaxrs:serviceBeans>
            <bean id="serviceDiscovery" class="com.dreameddeath.ui.admin.TestRest">
                <property name="address" value="/"/>
            </bean>
            <bean id="serviceDiscovery2" class="com.dreameddeath.ui.admin.TestRestV2">
                <property name="address" value="/"/>
            </bean>
            <bean id="tests" class="com.dreameddeath.ui.admin.process.RemoteTestDocCreateJobService" >
                <property name="address" value="/"/>
                <property name="endPoint" ref="endPoint"/>
                <property name="serviceRegistrar" ref="serviceRegistrarTests" />
                <property name="jobExecutorClientFactory" ref="executorClientFactory" />
                <property name="sessionFactory" ref="couchbaseSessionFactory" />
            </bean>
            <bean id="queryTestDoc" class="com.dreameddeath.ui.admin.RestQueryTestDocService">
                <property name="address" value="/" />
                <property name="endPoint" ref="endPoint"/>
            </bean>
            <bean id="queryTestOther" class="com.dreameddeath.ui.admin.RestQueryTestOtherService">
                <property name="address" value="/" />
                <property name="endPoint" ref="endPoint"/>
            </bean>
            <bean id="queryTestOther" class="com.dreameddeath.ui.admin.process.RestQueryTestDocProcessService">
                <property name="address" value="/" />
                <property name="endPoint" ref="endPoint"/>
            </bean>
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <bean class="com.dreameddeath.core.json.JsonProviderFactory" factory-method="getProvider">
                <constructor-arg value="service" />
            </bean>
        </jaxrs:providers>
   </jaxrs:server>



    <bean id="TestSoapService" class="com.dreameddeath.ui.admin.TestWebServiceImpl">
        <property name="address" value="/soapTests" />
    </bean>

    <jaxws:endpoint id="TestServiceEndPoint" implementor="#TestSoapService" address="/soapTests" />

</beans>