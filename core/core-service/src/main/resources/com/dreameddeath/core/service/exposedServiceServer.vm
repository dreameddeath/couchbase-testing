/*
 * Copyright Christophe Jeunesse
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package ${service.packageName};

import com.dreameddeath.core.service.annotation.ServiceDef;
import com.dreameddeath.core.service.context.IGlobalContext;
import com.dreameddeath.core.service.context.IGlobalContextTranscoder;
import com.dreameddeath.core.service.model.AbstractExposableService;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
#foreach($method in $methods)
import $method.responseClass.package;
#if($method.hasInput)
import $method.inputClass.package;
#end
#foreach($pathParam in $method.pathParams)
import $pathParam.classInfo.package;
#end
#end

@Generated(
    value = "${generator.name}"
    date = "${generator.date}"
    comments = "${generator.comments}"
)
@Path("$esc.java($service.path)")
@ServiceDef(name="${service.name}",version="${service.version}",status = "${service.status}")
@Api(value = "$esc.java($service.path)", description = "$esc.java($service.description)")
public class ${service.className} extends AbstractExposableService {
    private ${service.implClassName} _serviceImpl;
    private IGlobalContextTranscoder _transcoder;

    public void setServiceImplementation(${service.implClassName} serviceImpl){
        _serviceImpl = serviceImpl;
    }

    public void setGlobalContextTranscoder(IGlobalContextTranscoder transcoder){
        _transcoder = transcoder;
    }

#foreach($method in $methods)
    @${method.httpMethod}
    @Path("$esc.java($method.path)")
    @Produces({ MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_JSON })
    @ApiOperation(
            value = "$esc.java($method.name)",
            notes = "$esc.java($method.description)",
            response = ${method.responseClass.simpleName}.class,
            position = 0)
    /*
    TODO Map API response
    @ApiResponses({
            @ApiResponse(code = 400, message = "Invalid ID"),
            @ApiResponse(code = 404, message = "object not found")
    })*/
    public ${method.responseClass.simpleName} ${method.name} (
            @HeaderParam("X-CONTEXT") String contextParam
            #foreach($pathParam in $method.path.params)
            ,@PathParam("${pathParam.name}") ${pathParam.classInfo.SimpleName} ${pathParam.name}
            #end
            #if($method.hasBody)
            ,$method.body.classInfo.simpleName $method.body.name
            #end
            )
    {
        IGlobalContext context = _transcoder.decode(contextParam);
        #if(!$method.hasBody && $method.hasInput)
        $method.inputClass.simpleName ${method.inputClass.simpleName} = new $method.inputClass.simpleName();
        #end
        #foreach($pathParam in $method.pathParams)
        //TODO mapping of parameters fields
        #end

        return _serviceImpl.${method.name}(
                    context
                    #if($method.hasInput)
                    ,input
                    #end
                    ).toBlocking().first();
    }
#end

}

