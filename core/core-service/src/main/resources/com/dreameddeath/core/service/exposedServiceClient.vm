/*
 * Copyright Christophe Jeunesse
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package ${service.package};


import com.dreameddeath.core.service.client.IServiceClient;
import com.dreameddeath.core.service.client.ServiceClientFactory;
import com.dreameddeath.core.service.utils.ServiceObjectMapperConfigurator;
import com.dreameddeath.core.service.model.HasServiceClientFactory;
import com.dreameddeath.core.json.JsonProviderFactory;

import rx.Observable;

import javax.ws.rs.client.Entity;
import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.client.Invocation.Builder;
import javax.ws.rs.client.WebTarget;

import javax.annotation.Generated;

import org.springframework.beans.factory.annotation.Required;
import org.springframework.beans.factory.annotation.Autowired;

#foreach($import in $service.imports)
import ${import};
#end

@Generated(
    value = "${generator.name}",
    date = "${generator.date}",
    comments = "${generator.comment}"
)
public class ${service.clientSimpleClassName} implements HasServiceClientFactory#foreach($interface in $service.interfaces),$interface#end {
#if($service.hasGlobalContextTranscoder())
    private IGlobalContextTranscoder transcoder;
#end
    private IServiceClient serviceClient;

#if($service.hasGlobalContextTranscoder())
    @Autowired
    public void setContextTranscoder(IGlobalContextTranscoder transcoder){
        this.transcoder = transcoder;
    }
#end
    @Override @Autowired
    public void setServiceClientFactory(ServiceClientFactory serviceClientFactory){
        this.serviceClient = serviceClientFactory.getClient("${service.name}", "${service.version}");
    }

    @Override
    public IServiceClient getServiceClient(){
        return serviceClient;
    }

#foreach($method in $service.methods)
    @Override
    public Observable<${method.returnClassName}> ${method.name}(#foreach($param in $method.methodParamsDefinition)#if($foreach.index>0),#end $param.className $param.name #end){
        WebTarget target = serviceClient
                .getInstance()
                .path(
                    String.format(
                        "$esc.java($method.pathInfo.jaxRsPattern).substring(1)"
#foreach($pathParam in $method.pathInfo.urlParamsList)
                            ,$pathParam.getterString
#end
                    )
                );

#foreach($queryParam in $method.pathInfo.queryParamsList)
        if($queryParam.getterString!=null){
            target = target.queryParam("$esc.java($queryParam.name)",$queryParam.getterString);
        }
#end
        return Observable.from(
                    target.request(MediaType.APPLICATION_JSON_TYPE)
#if($method.hasGlobalContextParam())
                    .header("X-CONTEXT", transcoder.encode($method.globalContextParamName))
#end
                    .async()
                    .${method.httpMethod.toLowerCase()}(
#if($method.hasBody())
                        Entity.entity(${method.bodyInfo.getterString}, MediaType.APPLICATION_JSON_TYPE),
#elseif($method.needEmptyBody())
                        null,
#end
                        new GenericType<>(${method.returnClassName}.class)
                    )
                );
    }
#end
}
