/*
 * Copyright Christophe Jeunesse
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package ${service.packageName};


import com.dreameddeath.core.service.client.ServiceClientFactory;
import com.dreameddeath.core.service.context.IGlobalContext;
import com.dreameddeath.core.service.context.IGlobalContextTranscoder;
import com.dreameddeath.core.service.utils.ServiceJacksonObjectMapper;
import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
import rx.Observable;

import javax.ws.rs.client.Entity;
import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.MediaType;
import java.util.concurrent.Future;
import javax.annotation.Generated;

#foreach($method in $methods)
import $method.responseClass.package;
#if($method.hasInput)
import $method.inputClass.package;
#end
#foreach($pathParam in $method.pathParams)
import $pathParam.classInfo.package;
#end
#end

@Generated(
    value = "${generator.name}"
    date = "${generator.date}"
    comments = "${generator.comments}"
)

public class ${service.className} extends
    #foreach($interface in $service.interfaces)#if($loopCount>0),#end $interface #end {
    private IGlobalContextTranscoder _transcoder;
    private ServiceClientFactory _serviceClientFactory;

    public void setContextTranscoder(IGlobalContextTranscoder transcoder){
        _transcoder = transcoder;
    }

    public void setServiceClientFactory(ServiceClientFactory clientFactory){
        _serviceClientFactory = clientFactory;
    }

#foreach($method in $methods)
    @Override
    public Observable<${method.responseClass.simpleName}> ${method.name}(
        IGlobalContext ctxt,
         #foreach($param in $method.inputParameters)
         ,$param.classInfo.simpleName $param.name
         #end
        )
        {
        ///TODO map parameters
        Future<Result> responseFuture=
                _serviceClientFactory.getClient("${service.name}", "${service.version}")
                .register(new JacksonJsonProvider(ServiceJacksonObjectMapper.getInstance()))
                .path(String.format(
                    $method.path.value
                    #foreach($pathParam in $method.path.params)
                    ,$pathParam.name
                    #end
                    )
                )
                .request(MediaType.APPLICATION_JSON_TYPE)
                .header("X-CONTEXT", _transcoder.encode(ctxt))
                .async()
                .${method.httpMethod}(
                #if($method.hasBody)
                        Entity.entity(${method.body.name}, MediaType.APPLICATION_JSON_TYPE),
                        new GenericType<>(${method.body.classInfo.simpleName}.class)
                #end
                );

        return Observable.from(responseFuture);
    }
}
