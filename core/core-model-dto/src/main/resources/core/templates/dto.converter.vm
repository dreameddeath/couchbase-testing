/*
 * Copyright Christophe Jeunesse
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ${service.servicePackageName};

import javax.annotation.Generated;

import java.util.stream.Collectors;
import java.util.AbstractMap.SimpleImmutableEntry;
import java.util.Map;


#foreach($importName in $service.modelInfo.getServiceImports())
import ${importName};
#end

@Generated(
    value = "${generator.name}",
    date = "${generator.date}",
    comments = "${generator.comment}"
)

public class ${service.serviceClassName} implement
    IDtoFactoryAware,
    #if($service.hasInput())IDtoInputMapper<${service.shortName},${service.getInput().shortName}>#if($service.getInput().canConvert()) ,IDtoInputConverter<${service.shortName},${service.getInput().shortName}>#end #set( $prefix_impl = "," ) #end
    #if($service.hasOutput()) ${prefix_impl} IDtoOutputMapper<${service.shortName},${service.getOutput().shortName}>#if($service.getOutput().canConvert()) ,IDtoOutputConverter<${service.shortName},${service.getOutput().shortName}>#end #end
{
#if($service.hasInput() && $service.getInput().hasParent())
    private IDtoInputMapper<${service.shortName},${service.getInput().shortName}> parentInputMapper;
#end
#if($service.hasOutput() && $service.getOutput().hasParent())
    private IDtoOutputMapper<${service.shortName},${service.getOutput().shortName}> parentOutputMapper;
#end
    void setDtoConverterFactory(DtoConverterFactory factory){
#if($service.hasInput() && $service.getInput().hasParent())
        parentInputMapper =
#end
    }
#if($service.hasInput())
    #set($model=$service.getInput())

#if($model.canConvert())
    public static $model.origClassSimpleName convertToDoc(#if($model.isUnwrapped())${model.getUnwrappedSourceShortName()} #else ${model.shortName} #end source){
        if(source==null) return null;
        ${model.origClassSimpleName} result = new ${model.origClassSimpleName}();
        return mapToDoc(result,source);
    }
#end
    public static $model.origClassSimpleName mapToDoc($model.origClassSimpleName result,#if($model.isUnwrapped())${model.getUnwrappedSourceShortName()} #else ${model.shortName} #end source){
        if(source==null) return result;
#foreach($field in ${model.fieldsForMapping})
        ${service.job.buildSetter("result",$model,$field,$service.job.buildGetterWithMapping("source",$model,$field))};
#end
        return result;
    }
#end

#if($service.hasOutput())
    public static #if($model.isUnwrapped())${model.getUnwrappedSourceShortName()} #else ${model.shortName} #end mapToOutput(${model.origClassSimpleName} source,#if($model.isUnwrapped())${model.getUnwrappedSourceShortName()} result#end){
        if(source==null) return result;
#foreach($field in ${model.fieldsForMapping})
        ${service.job.buildSetter("result",$model,$field,$service.job.buildGetterWithMapping("source",$model,$field))};
#end
        return result;
    }
#end

#end

#foreach($enum in $service.enums.values())
#if($enum.isForInput())
    public static ${enum.origClassSimpleName} mapEnum(${enum.shortName} source){
        String sourceValue = (source==null)?null:source.toString();
        for(${enum.origClassSimpleName} value:${enum.origClassSimpleName}.values()){
            if(value.toString().equals(sourceValue)){
                return value;
            }
        }
        return null;
    }
#end

#if($enum.isForOutput())
    public static ${enum.getShortName()} mapEnum(${enum.origClassSimpleName} source){
        String sourceValue = (source==null)?null:source.toString();
        for(${enum.getShortName()} value:${enum.getShortName()}.values()){
            if(value.toString().equals(sourceValue)){
                return value;
            }
        }
        return null;
    }
#end
#end
}