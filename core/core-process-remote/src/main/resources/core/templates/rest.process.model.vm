/*
 * Copyright Christophe Jeunesse
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ${model.packageName};

import javax.annotation.Generated;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonGetter;

#foreach($importName in ${model.imports})
import ${importName};
#end


@Generated(
    value = "${generator.name}",
    date = "${generator.date}",
    comments = "${generator.comment}"
)
#if($model.hasRemoteInfo())
@RemoteServiceInfo(domain="${esc.java($model.remoteDomain)}",name="${esc.java($model.remoteName)}",version="${esc.java($model.remoteVersion)}")
#end
#if($model.hasChildClasses())
@JsonTypeInfo(use= JsonTypeInfo.Id.NAME)
@JsonSubTypes({
#foreach($subModel in $model.getListChildClasses())
    @JsonSubTypes.Type(value = ${subModel.shortName}.class,name = "${esc.java($subModel.subClassTypeName)}")#if($foreach.hasNext),#end
#end

})
#end

public #if($model.isAbstract()) abstract #end class ${model.shortName} #if($model.hasParentModel()) extends $model.getParentModelShortName() #end{
#foreach($field in ${model.fieldsForClass})
    @JsonProperty("${field.jsonName}")
    private ${field.type} ${field.variableName} ${field.getInitValue()};
#end


#foreach($field in ${model.fieldsForClass})
    @JsonSetter("${field.jsonName}")
    public void ${field.setterName}(${field.type} val){
        ${field.variableName} = val;
    }

    @JsonGetter("${field.jsonName}")
    public ${field.type} ${field.getterName}(){
        return ${field.variableName};
    }
#end

}