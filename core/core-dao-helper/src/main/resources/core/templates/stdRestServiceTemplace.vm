/*
 * Copyright Christophe Jeunesse
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package ${service.package};

import com.dreameddeath.core.dao.helper.service.AbstractDaoRestService;
import com.dreameddeath.core.dao.helper.service.DaoHelperServiceUtils;
import com.dreameddeath.core.dao.helper.service.SerializableViewQueryRow;
import com.dreameddeath.core.dao.model.view.IViewAsyncQueryResult;
import com.dreameddeath.core.dao.model.view.IViewQuery;
import com.dreameddeath.core.service.annotation.ServiceDef;
import com.dreameddeath.core.service.annotation.VersionStatus;;
import com.dreameddeath.core.service.model.AbstractExposableService;
import com.dreameddeath.core.dao.session.ICouchbaseSession;
import com.dreameddeath.core.session.impl.CouchbaseSessionFactory;
import com.dreameddeath.core.user.IUser;
import com.dreameddeath.core.user.IUserFactory;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;

import javax.annotation.Generated;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import java.util.Collection;

#foreach($import in $service.imports)
import ${import};
#end

@Generated(
    value = "${generator.name}",
    date = "${generator.date}",
    comments = "${generator.comment}"
)
/**
 * Created by Christophe Jeunesse on 14/04/2015.
 */
@Path("${service.path}") //${service.domain}/v${service.version}/${service.name.toLowerCase()}
@ServiceDef(name="${service.registeringName}",version="${service.version",status = VersionStatus.${service.status})
@Api(value = "${service.path}", description = "${service.descr}")
public class TestDaoRestService extends AbstractDaoRestService {

    @GET
    @Produces({ MediaType.APPLICATION_JSON })
    @ApiOperation(
                value = "GET",
                notes = "Lookup for all elements",
                response = SerializableViewQueryRow<String,String,TestDoc>,
                position = 0)
        /*
        TODO Map API response
        @ApiResponses({
                @ApiResponse(code = 400, message = "Invalid ID"),
                @ApiResponse(code = 404, message = "object not found")
        })*/
    public Response getAll(
            @HeaderParam("USER_TOKEN") String userToken,
            @PathParam("testDocId") String testDocId,
            @QueryParam("key") String key,
            @QueryParam("keys") Collection<String> keys,
            //start/end key case
            @QueryParam("startKey") String startKey,
            @QueryParam("endKey") String endKey,
            @QueryParam("inclusiveEndKey") Boolean inclusiveEndKey,
            //miscellaneous params
            @QueryParam("descending") Boolean descending,
            @QueryParam("offset") Integer offset,
            @QueryParam("limit") Integer limit,
            //Continuing Case
            @QueryParam("token") String token, @QueryParam("nb") Integer nbMore
    ) throws Exception
    {
        IUser user = getUserFactory().validateFromToken(userToken);
        ICouchbaseSession session = getSessionFactory().newReadOnlySession(user);
        IViewQuery<String,String,TestDoc> query  = session.initViewQuery(TestDocChild.class,"all_testChild");

        if(key!=null){ query.withKey(key);}
        else if(keys!=null && (keys.size()>0)){ query.withKeys(keys); }
        else if(startKey!=null){
            if(endKey==null){
                endKey = startKey;
            }
            if(inclusiveEndKey==null){
                inclusiveEndKey = true;
            }
            query.withStartKey(startKey);
            query.withEndKey(endKey,inclusiveEndKey);
        }
        else{
            query.withKey(String.format("test/%s",testDocId));
        }

        if(descending!=null){
            query.withDescending(descending);
        }
        if(offset!=null){
            query.withOffset(offset);
        }
        if(limit!=null){
            query.withLimit(limit);
        }

        Observable<IViewAsyncQueryResult<String,String,TestDoc>> resultObservable = session.executeAsyncQuery(query);
        ///TODO replace by chuncked result
        IViewAsyncQueryResult<String,String,TestDoc> result=resultObservable.toBlocking().first();
        if(result.getSuccess()){

            return Response.ok(result.getRows().map(SerializableViewQueryRow<String,String,TestDoc>::new).toList().toBlocking().first(),MediaType.APPLICATION_JSON_TYPE)
                    //TODO build token
                    .header(DaoHelperServiceUtils.HTTP_HEADER_QUERY_TOTAL_ROWS, result.getTotalRows())
                    .build();
        }
        else{
            return Response.serverError().entity(result.getErrorInfo().toBlocking().first()).type(MediaType.APPLICATION_JSON_TYPE).build();///TODO retrieve error info
        }
    }



    @POST
    @Produces({ MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_JSON })
    public Response create(@HeaderParam("USER_TOKEN") String userToken, @HeaderParam("DOC_FLAGS")Integer flags,TestDoc documentToCreate) throws Exception{
        IUser user = _userFactory.validateFromToken(userToken);
        ICouchbaseSession session = _sessionFactory.newReadWriteSession(user);
        session.attachEntity(documentToCreate);
        if(flags!=null){
            documentToCreate.getBaseMeta().setEncodedFlags(flags);
        }
        //session.save(documentToCreate);
        session.create(documentToCreate);
        return Response.ok(documentToCreate, MediaType.APPLICATION_JSON_TYPE)
                .header(DaoHelperServiceUtils.HTTP_HEADER_DOC_KEY, documentToCreate.getBaseMeta().getKey())
                .header(DaoHelperServiceUtils.HTTP_HEADER_DOC_REV, Long.toString(documentToCreate.getBaseMeta().getCas()))
                .header(DaoHelperServiceUtils.HTTP_HEADER_DOC_FLAGS, Long.toString(documentToCreate.getBaseMeta().getEncodedFlags()))
                .build();
    }


    @GET
    @Produces({ MediaType.APPLICATION_JSON })
    @Path("{id}")
    public Response read(@HeaderParam("USER_TOKEN") String userToken,
                         @PathParam("id") String id) throws Exception{
        IUser user = _userFactory.validateFromToken(userToken);
        ICouchbaseSession session = _sessionFactory.newReadOnlySession(user);
        TestDoc doc = session.get(String.format("test/%s",id),TestDoc.class);
        return Response.ok(doc,MediaType.APPLICATION_JSON_TYPE)
                .header(DaoHelperServiceUtils.HTTP_HEADER_DOC_KEY, doc.getBaseMeta().getKey())
                .header(DaoHelperServiceUtils.HTTP_HEADER_DOC_REV, Long.toString(doc.getBaseMeta().getCas()))
                .header(DaoHelperServiceUtils.HTTP_HEADER_DOC_FLAGS, Long.toString(doc.getBaseMeta().getEncodedFlags()))
                .build();
    }


    @DELETE
    @Produces({ MediaType.APPLICATION_JSON })
    @Path("{id}")
    public Response delete(@HeaderParam("USER_TOKEN") String userToken,
                         @PathParam("id") String id) throws Exception{
        IUser user = _userFactory.validateFromToken(userToken);
        ICouchbaseSession session = _sessionFactory.newReadOnlySession(user);
        TestDoc doc = session.get(String.format("test/%s",id),TestDoc.class);
        session.delete(doc);
        return Response.ok(doc,MediaType.APPLICATION_JSON_TYPE)
                .header(DaoHelperServiceUtils.HTTP_HEADER_DOC_KEY, doc.getBaseMeta().getKey())
                .header(DaoHelperServiceUtils.HTTP_HEADER_DOC_REV, Long.toString(doc.getBaseMeta().getCas()))
                .header(DaoHelperServiceUtils.HTTP_HEADER_DOC_FLAGS, Long.toString(doc.getBaseMeta().getEncodedFlags()))
                .build();
    }


    @PUT
    @Produces({ MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_JSON })
    @Path("{id}")
    public Response replace(@HeaderParam("USER_TOKEN") String userToken,
                           @HeaderParam(DaoHelperServiceUtils.HTTP_HEADER_DOC_REV) Long casData,
                           @HeaderParam(DaoHelperServiceUtils.HTTP_HEADER_DOC_FLAGS) Integer flags,
                           @PathParam("id") String id,
                           TestDoc updatedDocument) throws Exception{
        IUser user = _userFactory.validateFromToken(userToken);
        ICouchbaseSession session = _sessionFactory.newReadWriteSession(user);
        updatedDocument.getBaseMeta().setKey(String.format("test/%s", id));
        updatedDocument.getBaseMeta().setCas(casData);
        if(flags!=null) {
            updatedDocument.getBaseMeta().setEncodedFlags(flags);
        }
        updatedDocument.getBaseMeta().setStateSync();
        updatedDocument.getBaseMeta().setStateDirty();
        session.attachEntity(updatedDocument);
        session.update(updatedDocument);
        return Response.ok(updatedDocument,MediaType.APPLICATION_JSON_TYPE)
                .header(DaoHelperServiceUtils.HTTP_HEADER_DOC_KEY, updatedDocument.getBaseMeta().getKey())
                .header(DaoHelperServiceUtils.HTTP_HEADER_DOC_REV, Long.toString(updatedDocument.getBaseMeta().getCas()))
                .header(DaoHelperServiceUtils.HTTP_HEADER_DOC_FLAGS, Long.toString(updatedDocument.getBaseMeta().getEncodedFlags()))
                .build();
    }


    @GET
    @Produces({ MediaType.APPLICATION_JSON })
    @Path("_queries/testview")
    public Response getFromViewTestView(
                @HeaderParam("USER_TOKEN") String userToken,
                @QueryParam("key") String key,
                @QueryParam("keys") Collection<String> keys,
                //start/end key case
                @QueryParam("startKey") String startKey,
                @QueryParam("endKey") String endKey,
                @QueryParam("inclusiveEndKey") Boolean inclusiveEndKey,
                //miscellaneous params
                @QueryParam("descending") Boolean descending,
                @QueryParam("offset") Integer offset,
                @QueryParam("limit") Integer limit,
                //Continuing Case
                @QueryParam("token") String token, @QueryParam("nb") Integer nbMore
        ) throws Exception
    {
        IUser user = _userFactory.validateFromToken(userToken);
        ICouchbaseSession session = _sessionFactory.newReadOnlySession(user);
        IViewQuery<String,String,TestDoc> query  = session.initViewQuery(TestDoc.class,"testView");

        if(key!=null){ query.withKey(key);}
        else if(keys!=null && (keys.size()>0)){ query.withKeys(keys); }
        else if(startKey!=null){
            if(endKey==null){
                endKey = startKey;
            }
            if(inclusiveEndKey==null){
                inclusiveEndKey = true;
            }
            query.withStartKey(startKey);
            query.withEndKey(endKey,inclusiveEndKey);
        }

        if(descending!=null){
            query.withDescending(descending);
        }
        if(offset!=null){
            query.withOffset(offset);
        }
        if(limit!=null){
            query.withLimit(limit);
        }

        Observable<IViewAsyncQueryResult<String,String,TestDoc>> resultObservable = session.executeAsyncQuery(query);
        ///TODO replace by chuncked result
        IViewAsyncQueryResult<String,String,TestDoc> result=resultObservable.toBlocking().first();
        if(result.getSuccess()){

            return Response.ok(result.getRows().map(SerializableViewQueryRow<String,String,TestDoc>::new).toList().toBlocking().first(),MediaType.APPLICATION_JSON_TYPE)
                    //TODO build token
                    .header(DaoHelperServiceUtils.HTTP_HEADER_QUERY_TOTAL_ROWS, result.getTotalRows())
                    .build();
        }
        else{
            return Response.serverError().entity(result.getErrorInfo().toBlocking().first()).type(MediaType.APPLICATION_JSON_TYPE).build();///TODO retrieve error info
        }
    }

}
