/*
 * Copyright Christophe Jeunesse
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package ${service.package};

import com.dreameddeath.core.service.annotation.VersionStatus;
import com.dreameddeath.core.service.annotation.ServiceDef;
import com.dreameddeath.core.service.context.IGlobalContext;
import com.dreameddeath.core.service.context.IGlobalContextTranscoder;
import com.dreameddeath.core.service.model.AbstractExposableService;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;

import javax.annotation.Generated;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;

#foreach($import in $service.imports)
import ${import};
#end

@Generated(
    value = "${generator.name}",
    date = "${generator.date}",
    comments = "${generator.comment}"
)
@Path("$esc.java($service.path)")
@ServiceDef(name="${service.name}",version="${service.version}",status = VersionStatus.${service.status.name()})
@Api(value = "$esc.java($service.path)", description = "$esc.java($service.description)")
public class ${service.serverSimpleClassName} extends AbstractExposableService {
    private ${service.daoClassName} _dao;
#foreach($view in $service.views)
    private ${view.daoClassName} _${view.daoName};
#end

    public void setDao(${service.daoClassName} dao){
        _dao = dao;
#foreach($view in $service.views)
        _${view.daoName} = _dao.getViewDao("${view.name}");
#end
    }

    @POST
    @Produces({ MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_JSON })
    @Path("${service.createPath}")
    public ${service.className} create(list_of_path_params_without_current,${service.className} rootClass){
        return _dao.create(info);
    }

    @PUT
    @Produces({ MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_JSON })
    @Path("${service.stdPath}")
    public ${service.className} replace(list_of_path_params,${service.className} rootClass){
        //rebuild key
        //update key, change state, ...
        return _dao.update(info);
    }

    @GET
    @Produces({ MediaType.APPLICATION_JSON })
    @Path("${service.stdPath}")
    public ${service.className} read(list_of_path_params){
        //rebuild key
        return _dao.get(key);
    }

    @DELETE
    @Produces({ MediaType.APPLICATION_JSON })
    @Path("${service.stdPath}")
    public ${service.className} delete(list_of_path_params){
        //rebuild key
        ${service.className} result = _dao.get(key);
        _dao.delete(info)
        return result;
    }

#foreach($view in $service.views)
    @GET
    @Produces({ MediaType.APPLICATION_JSON })
    @Path("$view.stdPath") //Path of type /views/${viewName}?[queryValues]
    public List<${view.valueClass}> getFromView${view.viewName}(
            @QueryParam("key") ${view.keyClass} key,
            @QueryParam("keys") List<${view.keyClass}> keys,
            @QueryParam("startKey") ${view.keyClass} startKey,@QueryParam("endKey") ${view.keyClass},
            @QueryParam("descending") Boolean descending,
            @QueryParam("offset") Integer offset,
            @QueryParam("limit") Integer limit,
            //Continuing Case
            @QueryParam("token") String token, @QueryParam("nb")
            )
    {
        _${view.daoName}.buildViewQuery();
    }


}