/*
 * Copyright Christophe Jeunesse
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package ${service.package};


import com.dreameddeath.core.helper.service.AbstractDaoRestService;
import com.dreameddeath.core.helper.service.DaoHelperServiceUtils;
import com.dreameddeath.core.helper.service.SerializableViewQueryRow;
import com.dreameddeath.core.dao.model.view.IViewAsyncQueryResult;
import com.dreameddeath.core.dao.model.view.IViewQuery;
import com.dreameddeath.core.dao.model.view.IViewQueryRow;
import com.dreameddeath.core.dao.session.ICouchbaseSession;
import com.dreameddeath.core.service.annotation.ServiceDef;
import com.dreameddeath.core.service.annotation.VersionStatus;
import com.dreameddeath.core.service.annotation.DataAccessType;
import com.dreameddeath.core.user.IUser;
import static com.dreameddeath.core.helper.service.DaoHelperServiceUtils.SERVICE_TYPE_DATA;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.reactivex.Observable;


import javax.annotation.Generated;
import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.Collection;
import java.util.List;

#foreach($import in $service.imports)
import ${import};
#end

@Generated(
    value = "${generator.name}",
    date = "${generator.date}",
    comments = "${generator.comment}"
)
@Path("${service.rootRestPath}")
@ServiceDef(domain="${service.domain}",type=SERVICE_TYPE_DATA,name="${service.registeringName}$write",version="${service.version}",status = VersionStatus.${service.status},access=DataAccessType.READ_WRITE)
@Api(value = "${service.rootRestPath}", description = "${service.descr}")
public class ${service.targetWriteName} extends AbstractDaoRestService {

    @POST
    @Produces({ MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_JSON })
    public Response create(@Context IUser user,
            @HeaderParam("DOC_FLAGS")Integer flags,
            #foreach($parentAttributeInfo in $service.rootPathAttributeInfoList)
             @ApiParam("${parentAttributeInfo.descr}") @PathParam("${parentAttributeInfo.name}") ${parentAttributeInfo.type} ${parentAttributeInfo.name},
             #end
            ${service.classSimpleName} documentToCreate) throws Exception{
        ICouchbaseSession session = getSessionFactory().newReadWriteSession(user);
        session.attachEntity(documentToCreate);
        if(flags!=null){
            documentToCreate.getBaseMeta().setEncodedFlags(flags);
        }
        //session.save(documentToCreate);
        session.toBlocking().blockingCreate(documentToCreate);
        return Response.ok(documentToCreate, MediaType.APPLICATION_JSON_TYPE)
                .build();
    }




    @DELETE
    @Produces({ MediaType.APPLICATION_JSON })
    @Path("{${service.defaultAttributeName}}")
    public Response delete(@Context IUser user,
                          #foreach($parentAttributeInfo in $service.rootPathAttributeInfoList)
                             @ApiParam("${parentAttributeInfo.descr}") @PathParam("${parentAttributeInfo.name}") ${parentAttributeInfo.type} ${parentAttributeInfo.name},
                             #end
                             @ApiParam("The requested id") @PathParam("${service.defaultAttributeName}") String ${service.defaultAttributeName}) throws Exception{
        ICouchbaseSession session = getSessionFactory().newReadOnlySession(user);
        ${service.classSimpleName} doc = session.toBlocking().blockingGet(
                        String.format("$esc.java($service.fullDbKeyPattern)"
                        #foreach($paramInfo in $service.rootPathAttributeInfoList)
                           ,$paramInfo.name
                        #end
                            ,${service.defaultAttributeName}),
                        ${service.classSimpleName}.class);
        session.toBlocking().blockingDelete(doc);
        return Response.ok(doc,MediaType.APPLICATION_JSON_TYPE)
                .build();
    }


    @PUT
    @Produces({ MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_JSON })
    @Path("{${service.defaultAttributeName}}")
    public Response replace(@Context IUser user,
                           @HeaderParam(DaoHelperServiceUtils.HTTP_HEADER_DOC_REV) Long casData,
                           @HeaderParam(DaoHelperServiceUtils.HTTP_HEADER_DOC_FLAGS) Integer flags,
                           #foreach($parentAttributeInfo in $service.rootPathAttributeInfoList)
                           @ApiParam("${parentAttributeInfo.descr}") @PathParam("${parentAttributeInfo.name}") ${parentAttributeInfo.type} ${parentAttributeInfo.name},
                           #end
                           @ApiParam("The requested id") @PathParam("${service.defaultAttributeName}") String ${service.defaultAttributeName},
                           ${service.classSimpleName} updatedDocument) throws Exception{
        ICouchbaseSession session = getSessionFactory().newReadWriteSession(user);
        updatedDocument.getBaseMeta().setKey(
                            String.format("$esc.java($service.fullDbKeyPattern)"
                            #foreach($paramInfo in $service.rootPathAttributeInfoList)
                                ,$paramInfo.name
                            #end
                            ,${service.defaultAttributeName}));
        updatedDocument.getBaseMeta().setCas(casData);
        if(flags!=null) {
            updatedDocument.getBaseMeta().setEncodedFlags(flags);
        }
        updatedDocument.getBaseMeta().setStateSync();
        updatedDocument.getBaseMeta().setStateDirty();
        session.attachEntity(updatedDocument);
        session.toBlocking().blockingUpdate(updatedDocument);
        return Response.ok(updatedDocument,MediaType.APPLICATION_JSON_TYPE)
                .build();
    }

}
