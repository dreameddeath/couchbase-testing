/*
 * Copyright Christophe Jeunesse
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package ${service.package};


import com.dreameddeath.core.helper.service.AbstractDaoRestService;
import com.dreameddeath.core.helper.service.DaoHelperServiceUtils;
import com.dreameddeath.core.helper.service.SerializableViewQueryRow;
import com.dreameddeath.core.dao.model.view.IViewAsyncQueryResult;
import com.dreameddeath.core.dao.model.view.IViewQuery;
import com.dreameddeath.core.dao.model.view.IViewQueryRow;
import com.dreameddeath.core.dao.session.ICouchbaseSession;
import com.dreameddeath.core.service.annotation.ServiceDef;
import com.dreameddeath.core.service.annotation.DataAccessType;
import com.dreameddeath.core.service.annotation.VersionStatus;
import com.dreameddeath.core.user.IUser;
import static com.dreameddeath.core.helper.service.DaoHelperServiceUtils.SERVICE_TYPE_DATA;


import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.reactivex.Single;


import javax.annotation.Generated;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import java.util.Collection;
import java.util.List;

#foreach($import in $service.imports)
import ${import};
#end

@Generated(
    value = "${generator.name}",
    date = "${generator.date}",
    comments = "${generator.comment}"
)
@Path("${service.rootRestPath}")
@ServiceDef(domain="${service.domain}",type=SERVICE_TYPE_DATA,name="${service.registeringName}$read",version="${service.version}",status = VersionStatus.${service.status},access=DataAccessType.READ_ONLY)
@Api(value = "${service.rootRestPath}", description = "${service.descr}")
public class ${service.targetReadName} extends AbstractDaoRestService {
    private final String domain = "${service.domain}";

    public static class GetAllViewResult extends SerializableViewQueryRow<String,String,${service.classSimpleName}>{
        public GetAllViewResult(){super();}
        public GetAllViewResult(IViewQueryRow<String,String,${service.classSimpleName}> list){super(list);}
    }

    public String getDomain(){
        return domain;
    }

    @GET
    @Produces({ MediaType.APPLICATION_JSON })
    @ApiOperation(
                value = "Lookup for all elements",
                response = GetAllViewResult.class,
                responseContainer = "List",
                position = 0)
    public Response getAll(
            @Context IUser user,
#foreach($parentAttributeInfo in $service.rootPathAttributeInfoList)
            @ApiParam("${parentAttributeInfo.descr}") @PathParam("${parentAttributeInfo.name}") ${parentAttributeInfo.type} ${parentAttributeInfo.name},
#end
            @ApiParam("[EXACT SEARCH]the exact key to look for") @QueryParam("key") String key,
            @ApiParam("[LIST SEARCH]The list of key to search for") @QueryParam("keys") List<String> keys,
            //start/end key case
            @ApiParam("[RANGE SEARCH]The start key to search for") @QueryParam("startKey") String startKey,
            @ApiParam("[RANGE SEARCH]The end key to search for")  @QueryParam("endKey") String endKey,
            @ApiParam(value = "[RANGE SEARCH]flag to tell if end key lookup is inclusive",defaultValue = "false")  @QueryParam("inclusiveEndKey") Boolean inclusiveEndKey,
            //miscellaneous params
            @ApiParam(value = "Sort in descending keys",defaultValue = "false") @QueryParam("descending") Boolean descending,
            @QueryParam("offset") Integer offset,
            @QueryParam("limit") Integer limit,
            //Continuing Case
            @QueryParam("token") String token, @QueryParam("nb") Integer nbMore
    ) throws Exception
    {
        ICouchbaseSession session = getSessionFactory().newReadOnlySession(domain,user);
        IViewQuery<String,String,${service.classSimpleName}> query  = session.initViewQuery(${service.classSimpleName}.class,"all_${service.dbName}");

        if(key!=null){ query.withKey(key);}
        else if(keys!=null && (keys.size()>0)){ query.withKeys(keys); }
        else if(startKey!=null){
            if(endKey==null){
                endKey = startKey;
            }
            if(inclusiveEndKey==null){
                inclusiveEndKey = true;
            }
            query.withStartKey(startKey);
            query.withEndKey(endKey,inclusiveEndKey);
        }
        #if($service.rootPathAttributeInfoList.size() > 0)
        else{
            query.withKey(
                String.format("$esc.java($service.rootDbKeyPattern)"
                #foreach($paramInfo in $service.rootPathAttributeInfoList)
                   ,$paramInfo.name
                #end
                )
             );
        }
        #end
        if(descending!=null){
            query.withDescending(descending);
        }
        if(offset!=null){
            query.withOffset(offset);
        }
        if(limit!=null){
            query.withLimit(limit);
        }

        Single<IViewAsyncQueryResult<String,String,${service.classSimpleName}>> resultSingle = session.executeAsyncQuery(query);
        ///TODO replace by chuncked result
        IViewAsyncQueryResult<String,String,${service.classSimpleName}> result=resultSingle.blockingGet();
        if(result.getSuccess()){
            return Response.ok(result.getRows().map(SerializableViewQueryRow<String,String,${service.classSimpleName}>::new).toList().blockingGet(),MediaType.APPLICATION_JSON_TYPE)
                    //TODO build token for "continue" mode
                    .header(DaoHelperServiceUtils.HTTP_HEADER_QUERY_TOTAL_ROWS, result.getTotalRows())
                    .build();
        }
        else{
            return Response.serverError().entity(result.getErrorInfo().blockingSingle()).type(MediaType.APPLICATION_JSON_TYPE).build();///TODO retrieve error info
        }
    }

    @GET
    @Produces({ MediaType.APPLICATION_JSON })
    @Path("{${service.defaultAttributeName}}")
    @ApiOperation(
                    value = "Get a given element",
                    response = ${service.classSimpleName}.class,
                    position = 1)
    public Response read(@Context IUser user,
                        #foreach($parentAttributeInfo in $service.rootPathAttributeInfoList)
                        @ApiParam("${parentAttributeInfo.descr}") @PathParam("${parentAttributeInfo.name}") ${parentAttributeInfo.type} ${parentAttributeInfo.name},
                        #end
                        @ApiParam("The requested id") @PathParam("${service.defaultAttributeName}") String ${service.defaultAttributeName}) throws Exception{
        ICouchbaseSession session = getSessionFactory().newReadOnlySession(domain,user);
        ${service.classSimpleName} doc = session.toBlocking().blockingGet(
                        String.format("$esc.java($service.fullDbKeyPattern)"
                        #foreach($paramInfo in $service.rootPathAttributeInfoList)
                           ,$paramInfo.name
                        #end
                            ,${service.defaultAttributeName})
                            ,${service.classSimpleName}.class);
        return Response.ok(doc,MediaType.APPLICATION_JSON_TYPE)
                .build();
    }
}
