/*
 * Copyright Christophe Jeunesse
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ${service.restPackageName};

import javax.annotation.Generated;
import org.springframework.beans.factory.annotation.Autowired;

import com.dreameddeath.core.service.annotation.ServiceDef;
import com.dreameddeath.core.user.IUser;
import com.dreameddeath.core.query.service.rest.AbstractRestQueryService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.ApiResponse;

import ${service.serviceFullName};
import ${service.outputModel.importName};

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.PathParam;
import javax.ws.rs.container.AsyncResponse;
import javax.ws.rs.container.Suspended;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriInfo;


@Generated(
    value = "${generator.name}",
    date = "${generator.date}",
    comments = "${generator.comment}"
)

@ServiceDef(domain = "${service.domain}",type=AbstractRestQueryService.SERVICE_TYPE,name="${service.name}",version = "${service.version}")
@Path("${service.path}")
@Api(value = "${service.path}", description = "${service.descr}")
public class ${service.restClassName} extends AbstractRestQueryService<${service.outputModel.shortName}> {
    @Autowired
    public void setQueryService(${service.serviceClassName} queryService) {
        super.setInternalQueryService(queryService);
    }

    @GET
    @Path("/{key:[^_/].*}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiResponses(value = {
              @ApiResponse(code = 200, message= "The query result",response = ${service.outputModel.shortName}.class),
              @ApiResponse(code = 404, message = "Object not found")
    })
    public void read(
        @Context IUser user,
        @PathParam("key") String key,
        @Suspended AsyncResponse asyncResponse)
    {
        try {
            super.doGet("${service.keyPrefix}"+key,user,asyncResponse);
        }
        catch (Throwable e){
            asyncResponse.resume(e);
        }
    }

    @GET
    @Path("/_search/{type}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiResponses(value = {
              @ApiResponse(code = 200, message= "The query result",response = ${service.outputModel.shortName}.class),
              @ApiResponse(code = 404, message = "Object not found")
    })
    public void search(
        @Context IUser user,
        @PathParam("type") String searchType,
        @Context UriInfo uriInfo,
        @Suspended AsyncResponse asyncResponse)
    {
        try {
            super.doSearch(searchType,uriInfo.getQueryParameters(),user,asyncResponse);
        }
        catch (Throwable e){
            asyncResponse.resume(e);
        }
    }
}