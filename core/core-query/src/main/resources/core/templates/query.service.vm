/*
 * Copyright Christophe Jeunesse
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ${service.servicePackageName};

import javax.annotation.Generated;

import com.dreameddeath.core.service.annotation.ServiceDef;
import com.dreameddeath.core.user.IUser;
import com.dreameddeath.core.query.service.AbstractStandardQueryService;

import java.util.stream.Collectors;
import java.util.AbstractMap.SimpleImmutableEntry;
import java.util.Map;


#foreach($importName in $service.modelInfo.getServiceImports())
import ${importName};
#end

@Generated(
    value = "${generator.name}",
    date = "${generator.date}",
    comments = "${generator.comment}"
)

public class ${service.serviceClassName} extends AbstractStandardQueryService<${service.outputModel.origClassSimpleName},${service.outputModel.shortName}> {

    @Override
    protected ${service.outputModel.shortName} mapToPublic(${service.outputModel.origClassSimpleName} doc){
        return ${service.outputModel.mapFctName}(doc);
    }

#foreach($model in $service.models.values())
    private #if($model.isUnwrapped())${model.getUnwrappedSourceShortName()} #else ${model.shortName} #end ${model.mapFctName}(#if($model.isUnwrapped())${model.getUnwrappedSourceShortName()} result,#end ${model.origClassSimpleName} source){
        if(source==null) return null;
#if(!$model.isUnwrapped())
#if($model.hasChildClasses())
        ${model.shortName} result;
#foreach($subModel in $model.getFirstLevelChilds())
        if(source instanceof ${subModel.origClassSimpleName}){
            result = ${model.mapFctName}((${subModel.origClassSimpleName})source);
        } #if($foreach.hasNext) else #end
#end
        else {
            throw new RuntimeException("Unmanage class mapping " + source.getClass().getName());
        }
#else
        ${model.shortName} result = new ${model.shortName}();
#end
#end
#foreach($field in ${model.fieldsForMapping})
        ${service.modelInfo.buildSetter("result",$model,$field,$service.modelInfo.buildGetterWithMapping("source",$model,$field))};
#end
        return result;
    }
#end

#foreach($enum in $service.enums.values())
    private ${enum.getShortName()} mapEnum(${enum.origClassSimpleName} source){
        String sourceValue = (source==null)?null:source.toString();
        for(${enum.getShortName()} value:${enum.getShortName()}.values()){
            if(value.toString().equals(sourceValue)){
                return value;
            }
        }
        return null;
    }
#end
}